name: CI/CD Pipeline with GHCR

on:
  push:
    branches:
      - master

# 환경 변수: ghcr.io 이미지 이름을 정의합니다.
# ghcr.io는 경로에 대문자를 허용하지 않으므로 소문자로 변환하는 단계가 필요합니다.
env:
  REGISTRY: ghcr.io

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    # 워크플로우에 ghcr.io에 이미지를 푸시(쓰기)할 권한을 부여합니다.
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check Runner Architecture
        run: uname -m

      # 2. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. application-prod.yml 생성
      - name: Create application-prod.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROD }}" > src/main/resources/application-prod.yml

      # 3. 이미지 이름을 소문자로 설정 (ghcr.io 요구사항)
      - name: Set lowercase image name
        run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 4. JDK 17 설정 및 Gradle 캐싱 활성화
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 5. Gradle 실행 권한 부여 및 테스트
      - name: Grant Gradle permissions
        run: chmod +x ./gradlew
      - name: Test with Gradle
        run: ./gradlew test

      # 6. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # 7. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 8. GitHub Container Registry(ghcr.io) 로그인
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} # 별도 Secret 없이 GITHUB_TOKEN 사용

      # 9. Docker 이미지 빌드 및 푸시 (Git SHA 태그 사용 및 캐싱)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # ghcr.io/{소유자}/{이미지명}:{태그} 형식으로 태그를 지정합니다.
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max

      # 10. 서버 배포
      - name: Deploy to Development Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          script: |
            cd /home/ubuntu/project
            
            # 환경변수 파일 생성 (.env)
            # DOCKER_IMAGE_NAME 변수가 ghcr.io 주소로 변경되었습니다.
            cat << EOF > .env
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            MYSQL_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            SPRING_PROFILES_ACTIVE=prod
            IMAGE_TAG=${{ github.sha }}
            DOCKER_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            EOF

            # ghcr.io에서 새로 빌드된 Docker 이미지를 pull 받습니다.
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
            # docker-compose로 재시작
            docker-compose down
            docker-compose up -d

            # 불필요한 Docker 이미지 정리
            docker image prune -f --filter "dangling=true"
