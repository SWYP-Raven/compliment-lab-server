name: CI/CD Pipeline with GHCR

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check Runner Architecture
        run: uname -m

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create application-prod.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROD }}" > src/main/resources/application-prod.yml

      - name: Set lowercase image name
        run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant Gradle permissions
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # âœ… ì—¬ê¸° ìˆ˜ì •
      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max

      - name: Deploy to Development Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          script: |
            set -e
            cd /home/user

            cat << EOF > .env
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            MYSQL_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            SPRING_PROFILES_ACTIVE=prod
            IMAGE_TAG=${{ github.sha }}
            DOCKER_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            EOF

            echo "âœ… .env file created successfully"

            echo "ðŸ”„ Pulling latest image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

            echo "ðŸš€ Restarting containers..."
            docker-compose down
            docker-compose up -d

            echo "ðŸ§¹ Cleaning up old images..."
            docker image prune -f --filter "dangling=true"

            echo "âœ… Deployment completed successfully!"